<?xml version="1.0"?>
<doc>
    <assembly>
        <name>Dapper.SimpleRepository</name>
    </assembly>
    <members>
        <member name="T:Dapper.SimpleRepository.IRepositoryGeneric">
            <summary>
            Create a generic (weakly) typed instance of Dapper.SimpleRepository.
            </summary>
        </member>
        <member name="M:Dapper.SimpleRepository.IRepositoryGeneric.Get``1(System.Int32,System.Nullable{System.Int32})">
            <summary>
            <para>Get a specific record by the primary key (id).</para>
            <para>Queries the table matching the type T.</para>
            </summary>
            <param name="id"></param>
            <param name="commandTimeout">Optional command time out value.</param>
            <returns>A single record of type T where the primary key matches the supplied id.</returns>
        </member>
        <member name="M:Dapper.SimpleRepository.IRepositoryGeneric.GetAsync``1(System.Int32,System.Nullable{System.Int32})">
            <summary>
            <para>Get a specific record by the primary key (id).</para>
            <para>Queries the table matching the type T.</para>
            </summary>
            <param name="id"></param>
            <param name="commandTimeout">Optional command time out value.</param>
            <returns>A single record of type T where the primary key matches the supplied id.</returns>
        </member>
        <member name="M:Dapper.SimpleRepository.IRepositoryGeneric.Get``1(System.String,System.Collections.Generic.Dictionary{System.String,System.Object},System.Nullable{System.Int32})">
            <summary>
            <para>Get a specific record that matches the specified filter.</para>
            <para>Queries the table matching the type T.</para>
            </summary>
            <typeparam name="T">The type that matches the database table.</typeparam>
            <param name="where">The SQL WHERE clause.</param>
            <param name="parms">Optional set of parameters that matches the query.</param>
            <param name="commandTimeout">Optional command time out value.</param>
            <returns>A single record of type T where the data matches the supplied WHERE filter.</returns>
        </member>
        <member name="M:Dapper.SimpleRepository.IRepositoryGeneric.GetAsync``1(System.String,System.Collections.Generic.Dictionary{System.String,System.Object},System.Nullable{System.Int32})">
            <summary>
            <para>Get a specific record that matches the specified filter</para>
            <para>Queries the table matching the type T.</para>
            </summary>
            <typeparam name="T">The type that matches the database table.</typeparam>
            <param name="where">The SQL WHERE clause.</param>
            <param name="parms">Optional set of parameters that matches the query.</param>
            <param name="commandTimeout">Optional command time out value.</param>
            <returns>A single record of type T where the data matches the supplied WHERE filter.</returns>
        </member>
        <member name="M:Dapper.SimpleRepository.IRepositoryGeneric.GetFromQuery``1(System.String,System.Collections.Generic.Dictionary{System.String,System.Object},System.Nullable{System.Int32})">
            <summary>
            <para>Get a specific type from a query. This type could be a database model, or it could be a single string, or it could be an INT if the query is a SELECT COUNT().</para>
            <para>Queries the table matching the type T.</para>
            </summary>
            <typeparam name="T">The type that matches the database table.</typeparam>
            <param name="query"></param>
            <param name="parms">Optional set of parameters that matches the query.</param>
            <param name="commandTimeout">Optional command time out value.</param>
            <returns>A single instance of type T that matches the supplied query.</returns>
        </member>
        <member name="M:Dapper.SimpleRepository.IRepositoryGeneric.GetFromQueryAsync``1(System.String,System.Collections.Generic.Dictionary{System.String,System.Object},System.Nullable{System.Int32})">
            <summary>
            <para>Get a specific type from a query.  This type could be a database model, or it could be a single string, or it could be an INT if the query is a SELECT COUNT().</para>
            <para>Queries the table matching the type T.</para>
            </summary>
            <typeparam name="T">The type that matches the database table.</typeparam>
            <param name="query"></param>
            <param name="parms">Optional set of parameters that matches the query.</param>
            <param name="commandTimeout">Optional command time out value.</param>
            <returns>A single instance of type T that matches the supplied query.</returns>
        </member>
        <member name="M:Dapper.SimpleRepository.IRepositoryGeneric.GetAll``1">
            <summary>
            <para>Get an IEnumerable of all records.</para>
            <para>Queries the table matching the type T.</para>
            </summary>
            <returns>an IEnumerable of type T.</returns>
        </member>
        <member name="M:Dapper.SimpleRepository.IRepositoryGeneric.GetAllAsync``1">
            <summary>
            <para>Get an IEnumerable of all records.</para>
            <para>Queries the table matching the type T.</para>
            </summary>
            <returns>An IEnumerable of type T.</returns>
        </member>
        <member name="M:Dapper.SimpleRepository.IRepositoryGeneric.GetList``1(System.String,System.Collections.Generic.Dictionary{System.String,System.Object},System.Nullable{System.Int32})">
            <summary>
            <para>Get an IEnumerable that matches the specified filter</para>
            <para>Queries the table matching the type T.</para>
            </summary>
            <typeparam name="T">The type that matches the database table.</typeparam>
            <param name="where">The SQL WHERE clause.</param>
            <param name="parms">Optional set of parameters that matches the query.</param>
            <param name="commandTimeout">Optional command time out value.</param>
            <returns>An IEnumerable of type T where the data matches the supplied WHERE filter.</returns>
        </member>
        <member name="M:Dapper.SimpleRepository.IRepositoryGeneric.GetListAsync``1(System.String,System.Collections.Generic.Dictionary{System.String,System.Object},System.Nullable{System.Int32})">
            <summary>
            <para>Get an IEnumerable that matches the specified filter</para>
            <para>Queries the table matching the type T.</para>
            </summary>
            <typeparam name="T">The type that matches the database table.</typeparam>
            <param name="where">The SQL WHERE clause.</param>
            <param name="parms">Optional set of parameters that matches the query.</param>
            <param name="commandTimeout">Optional command time out value.</param>
            <returns>An IEnumerable of type T where the data matches the supplied WHERE filter.</returns>
        </member>
        <member name="M:Dapper.SimpleRepository.IRepositoryGeneric.GetListFromQuery``1(System.String,System.Collections.Generic.Dictionary{System.String,System.Object},System.Nullable{System.Int32})">
            <summary>
            <para>Get an IEnumerable based on a custom query and any (optional) parameters</para>
            <para>Queries the table matching the type T.</para>
            </summary>
            <typeparam name="T">The type that matches the database table.</typeparam>
            <param name="query"></param>
            <param name="parms">Optional set of parameters that matches the query.</param>
            <param name="commandTimeout">Optional command time out value.</param>
            <returns>An IEnumerable of type T that matches the supplied query.</returns>
        </member>
        <member name="M:Dapper.SimpleRepository.IRepositoryGeneric.GetListFromQueryAsync``1(System.String,System.Collections.Generic.Dictionary{System.String,System.Object},System.Nullable{System.Int32})">
            <summary>
            <para>Get an IEnumerable based on a custom query and any (optional) parameters</para>
            <para>Queries the table matching the type T.</para>
            </summary>
            <typeparam name="T">The type that matches the database table.</typeparam>
            <param name="query"></param>
            <param name="parms">Optional set of parameters that matches the query.</param>
            <param name="commandTimeout">Optional command time out value.</param>
            <returns>An IEnumerable of type T that matches the supplied query.</returns>
        </member>
        <member name="M:Dapper.SimpleRepository.IRepositoryGeneric.GetListPaged``1(System.Int32,System.Int32,System.String,System.String,System.Collections.Generic.Dictionary{System.String,System.Object},System.Nullable{System.Int32})">
            <summary>
            <para>Get a paged IEnumerable of all records.</para>
            <para>Queries the table matching the type T.</para>
            </summary>
            <typeparam name="T">The type that matches the database table.</typeparam>
            <param name="pageNumber">The offset (or page number) of the total set to select.</param>
            <param name="rowsPerPage">The number of total records to return per page.</param>
            <param name="where">Optional WHERE clause to filter the resutls.</param>
            <param name="orderBy">Optional ORDER BY clause to order the results.</param>
            <param name="parms">Optinal set of paramaters used in WHERE or ORDER BY clauses.</param>
            <param name="commandTimeout">Optional command time out value.</param>
            <returns>A paged IEnumerable of type T.</returns>
        </member>
        <member name="M:Dapper.SimpleRepository.IRepositoryGeneric.GetListPagedAsync``1(System.Int32,System.Int32,System.String,System.String,System.Collections.Generic.Dictionary{System.String,System.Object},System.Nullable{System.Int32})">
            <summary>
            <para>Get a paged IEnumerable of all records.</para>
            <para>Queries the table matching the type T.</para>
            </summary>
            <typeparam name="T">The type that matches the database table.</typeparam>
            <param name="pageNumber">The offset (or page number) of the total set to select.</param>
            <param name="rowsPerPage">The number of total records to return per page.</param>
            <param name="where">Optional WHERE clause to filter the resutls.</param>
            <param name="orderBy">Optional ORDER BY clause to order the results.</param>
            <param name="parms">Optinal set of paramaters used in WHERE or ORDER BY clauses.</param>
            <param name="commandTimeout">Optional command time out value.</param>
            <returns>A paged IEnumerable of type T.</returns>
        </member>
        <member name="M:Dapper.SimpleRepository.IRepositoryGeneric.Update``1(``0,System.Nullable{System.Int32})">
            <summary>
            <para>Update an existing record.</para>
            <para>Queries the table matching the type T.</para>
            </summary>
            <param name="entity">An instance of type T to be updated.</param>
            <param name="commandTimeout">Optional command time out value.</param>
            <returns>Number of rows affected.</returns>
        </member>
        <member name="M:Dapper.SimpleRepository.IRepositoryGeneric.UpdateAsync``1(``0,System.Nullable{System.Int32})">
            <summary>
            <para>Update an existing record.</para>
            <para>Queries the table matching the type T.</para>
            </summary>
            <param name="entity">An instance of type T to be updated.</param>
            <param name="commandTimeout">Optional command time out value.</param>
            <returns>Number of rows affected.</returns>
        </member>
        <member name="M:Dapper.SimpleRepository.IRepositoryGeneric.Insert``1(``0,System.Nullable{System.Int32})">
            <summary>
            <para>Insert a new record.</para>
            <para>Inserts into the table matching the type T.</para>
            </summary>
            <param name="entity">An instance of type T to be updated.</param>
            <param name="commandTimeout">Optional command time out value.</param>
            <returns>The ID (primary key) of the newly inserted record.</returns>
        </member>
        <member name="M:Dapper.SimpleRepository.IRepositoryGeneric.InsertAsync``1(``0,System.Nullable{System.Int32})">
            <summary>
            <para>Insert a new record.</para>
            <para>Inserts into the table matching the type T.</para>
            </summary>
            <param name="entity">An instance of type T to be updated.</param>
            <param name="commandTimeout">Optional command time out value.</param>
            <returns>The ID (primary key) of the newly inserted record.</returns>
        </member>
        <member name="M:Dapper.SimpleRepository.IRepositoryGeneric.Delete``1(System.Int32,System.Nullable{System.Int32})">
            <summary>
            <para>Delete a record by primary key (id).</para>
            <para>Deletes from the table matching the type T.</para>
            </summary>
            <param name="id">The ID (primary key) of the item to be deleted.</param>
            <param name="commandTimeout">Optional command time out value.</param>
            <returns>Number of rows affected.</returns>
        </member>
        <member name="M:Dapper.SimpleRepository.IRepositoryGeneric.DeleteAsync``1(System.Int32,System.Nullable{System.Int32})">
            <summary>
            <para>Delete a record by primary key (id).</para>
            <para>Deletes from the table matching the type T.</para>
            </summary>
            <param name="id">The ID (primary key) of the item to be deleted.</param>
            <param name="commandTimeout">Optional command time out value.</param>
            <returns>Number of rows affected.</returns>
        </member>
        <member name="M:Dapper.SimpleRepository.IRepositoryGeneric.Delete``1(System.String,System.Collections.Generic.Dictionary{System.String,System.Object},System.Nullable{System.Int32})">
            <summary>
            <para>Delete all records that match the specified filter.</para>
            <para>Deletes from the table matching the type T.</para>
            </summary>
            <param name="where">Optional WHERE clause.</param>
            <param name="parms">Optional set of parameters that matches the WHERE clause.</param>
            <param name="commandTimeout">Optional command time out value.</param>
            <returns>Number of rows affected.</returns>
        </member>
        <member name="M:Dapper.SimpleRepository.IRepositoryGeneric.DeleteAsync``1(System.String,System.Collections.Generic.Dictionary{System.String,System.Object},System.Nullable{System.Int32})">
            <summary>
            <para>Delete all records that match the specified filter.</para>
            <para>Deletes from the table matching the type T.</para>
            </summary>
            <param name="where">Optional WHERE clause.</param>
            <param name="parms">Optional set of parameters that matches the WHERE clause.</param>
            <param name="commandTimeout">Optional command time out value.</param>
            <returns>Number of rows affected.</returns>
        </member>
        <member name="M:Dapper.SimpleRepository.IRepositoryGeneric.ExecuteQuery``1(System.String,System.Collections.Generic.Dictionary{System.String,System.Object},System.Nullable{System.Int32})">
            <summary>
            <para>Execute any custom query where a return data set it not expected.</para>
            <para>Queries the table matching the type T.</para>
            </summary>
            <typeparam name="T">The type that matches the database table.</typeparam>
            <param name="query">Full SQL query.</param>
            <param name="parms">Optional set of parameters that matches the query.</param>
            <param name="commandTimeout">Optional command time out value.</param>
        </member>
        <member name="M:Dapper.SimpleRepository.IRepositoryGeneric.ExecuteQueryAsync``1(System.String,System.Collections.Generic.Dictionary{System.String,System.Object},System.Nullable{System.Int32})">
            <summary>
            <para>Execute any custom query where a return data set it not expected.</para>
            <para>Queries the table matching the type T.</para>
            </summary>
            <typeparam name="T">The type that matches the database table.</typeparam>
            <param name="query">Full SQL query.</param>
            <param name="parms">Optional set of parameters that matches the query.</param>
            <param name="commandTimeout">Optional command time out value.</param>
        </member>
        <member name="M:Dapper.SimpleRepository.IRepositoryGeneric.ExecuteScalar``1(System.String,System.Collections.Generic.Dictionary{System.String,System.Object},System.Nullable{System.Int32})">
            <summary>
            <para>Execute any custom query where a single return item is expected. This type could be a database model, or it could be a single string, or it could be an INT if the query is a SELECT COUNT().</para>
            <para>Queries the table matching the type T.</para>
            </summary>
            <param name="query">Full SQL query.</param>
            <param name="parms">Optional set of parameters that matches the query.</param>
            <param name="commandTimeout">Optional command time out value.</param>
            <returns>A single instance of type T that matches the supplied query.</returns>
        </member>
        <member name="M:Dapper.SimpleRepository.IRepositoryGeneric.ExecuteScalarAsync``1(System.String,System.Collections.Generic.Dictionary{System.String,System.Object},System.Nullable{System.Int32})">
            <summary>
            <para>Execute any custom query where a single return item is expected. This type could be a database model, or it could be a single string, or it could be an INT if the query is a SELECT COUNT().</para>
            <para>Queries the table matching the type T.</para>
            </summary>
            <param name="query">Full SQL query.</param>
            <param name="parms">Optional set of parameters that matches the query.</param>
            <param name="commandTimeout">Optional command time out value.</param>
            <returns>A single instance of type T that matches the supplied query.</returns>
        </member>
        <member name="M:Dapper.SimpleRepository.IRepositoryGeneric.ExecuteSP(System.String,System.Collections.Generic.Dictionary{System.String,System.Object},System.Nullable{System.Int32})">
            <summary>
            <para>Execute any Stored Procedure where a return data set it not expected.</para>
            </summary>
            <param name="storedProcedureName">Name of the stored procedure to be executed.</param>
            <param name="parms">Optional set of parameters that matches the query.</param>
            <param name="commandTimeout">Optional command time out value.</param>
        </member>
        <member name="M:Dapper.SimpleRepository.IRepositoryGeneric.ExecuteSPAsync(System.String,System.Collections.Generic.Dictionary{System.String,System.Object},System.Nullable{System.Int32})">
            <summary>
            <para>Execute any Stored Procedure where a return data set it not expected.</para>
            </summary>
            <param name="storedProcedureName">Name of the stored procedure to be executed.</param>
            <param name="parms">Optional set of parameters that matches the query.</param>
        </member>
        <member name="M:Dapper.SimpleRepository.IRepositoryGeneric.ExecuteSPSingle``1(System.String,System.Collections.Generic.Dictionary{System.String,System.Object},System.Nullable{System.Int32})">
            <summary>
            <para>Execute any Stored Procedure where a single item is expected as a return.</para>
            </summary>
            <typeparam name="T">The type that matches the database table.</typeparam>
            <param name="storedProcedureName">Name of the stored procedure to be executed.</param>
            <param name="parms">Optional set of parameters that matches the query.</param>
            <param name="commandTimeout">Optional command time out value.</param>
            <returns>A single instance of type T.</returns>
        </member>
        <member name="M:Dapper.SimpleRepository.IRepositoryGeneric.ExecuteSPSingleAsync``1(System.String,System.Collections.Generic.Dictionary{System.String,System.Object},System.Nullable{System.Int32})">
            <summary>
            <para>Execute any Stored Procedure where a single item is expected as a return.</para>
            </summary>
            <typeparam name="T">The type that matches the database table.</typeparam>
            <param name="storedProcedureName">Name of the stored procedure to be executed.</param>
            <param name="parms">Optional set of parameters that matches the query.</param>
            <param name="commandTimeout">Optional command time out value.</param>
            <returns>A single instance of type T.</returns>
        </member>
        <member name="M:Dapper.SimpleRepository.IRepositoryGeneric.ExecuteSPList``1(System.String,System.Collections.Generic.Dictionary{System.String,System.Object},System.Nullable{System.Int32})">
            <summary>
            <para>Execute a Store Procedure when a List of T is expected in return.</para>
            </summary>
            <typeparam name="T">The type that matches the database table.</typeparam>
            <param name="storedProcedureName">Name of the stored procedure to be executed.</param>
            <param name="parms">Optional set of parameters that matches the query.</param>
            <param name="commandTimeout">Optional command time out value.</param>
            <returns>An IEnumerable of type T.</returns>
        </member>
        <member name="M:Dapper.SimpleRepository.IRepositoryGeneric.ExecuteSPListAsync``1(System.String,System.Collections.Generic.Dictionary{System.String,System.Object},System.Nullable{System.Int32})">
            <summary>
            <para>Execute a Store Procedure when a List of T is expected in return.</para>
            </summary>
            <typeparam name="T">The type that matches the database table.</typeparam>
            <param name="storedProcedureName">Name of the stored procedure to be executed.</param>
            <param name="parms">Optional set of parameters that matches the query.</param>
            <param name="commandTimeout">Optional command time out value.</param>
            <returns>An IEnumerable of type T.</returns>
        </member>
        <member name="T:Dapper.SimpleRepository.IRepositoryStrong`1">
            <summary>
            Create a strongly typed instance of Dapper.SimpleRepository.
            </summary>
            <typeparam name="T"></typeparam>
        </member>
        <member name="M:Dapper.SimpleRepository.IRepositoryStrong`1.Get(System.Int32,System.Nullable{System.Int32})">
            <summary>
            <para>Get a specific record by the primary key (id).</para>
            </summary>
            <param name="id"></param>
            <param name="commandTimeout">Optional command time out value.</param>
            <returns>A single record of type T where the primary key matches the supplied id.</returns>
        </member>
        <member name="M:Dapper.SimpleRepository.IRepositoryStrong`1.GetAsync(System.Int32,System.Nullable{System.Int32})">
            <summary>
            <para>Get a specific record by the primary key (id).</para>
            </summary>
            <param name="id"></param>
            <param name="commandTimeout">Optional command time out value.</param>
            <returns>A single record of type T where the primary key matches the supplied id.</returns>
        </member>
        <member name="M:Dapper.SimpleRepository.IRepositoryStrong`1.Get(System.String,System.Collections.Generic.Dictionary{System.String,System.Object},System.Nullable{System.Int32})">
            <summary>
            <para>Get a specific record that matches the specified filter.</para>
            </summary>
            <param name="where">The SQL WHERE clause.</param>
            <param name="parms">Optional set of parameters that matches the query.</param>
            <param name="commandTimeout">Optional command time out value.</param>
            <returns>A single record of type T where the data matches the supplied WHERE filter.</returns>
        </member>
        <member name="M:Dapper.SimpleRepository.IRepositoryStrong`1.GetAsync(System.String,System.Collections.Generic.Dictionary{System.String,System.Object},System.Nullable{System.Int32})">
            <summary>
            <para>Get a specific record that matches the specified filter.</para>
            </summary>
            <param name="where">The SQL WHERE clause.</param>
            <param name="parms">Optional set of parameters that matches the query.</param>
            <param name="commandTimeout">Optional command time out value.</param>
            <returns>A single record of type T where the data matches the supplied WHERE filter.</returns>
        </member>
        <member name="M:Dapper.SimpleRepository.IRepositoryStrong`1.GetFromQuery(System.String,System.Collections.Generic.Dictionary{System.String,System.Object},System.Nullable{System.Int32})">
            <summary>
            <para>Get a specific type from a query. This type could be a database model, or it could be a single string, or it could be an INT if the query is a SELECT COUNT().</para>
            </summary>
            <param name="query"></param>
            <param name="parms">Optional set of parameters that matches the query.</param>
            <param name="commandTimeout">Optional command time out value.</param>
            <returns>A single instance of type T that matches the supplied query.</returns>
        </member>
        <member name="M:Dapper.SimpleRepository.IRepositoryStrong`1.GetFromQueryAsync(System.String,System.Collections.Generic.Dictionary{System.String,System.Object},System.Nullable{System.Int32})">
            <summary>
            <para>Get a specific type from a query. This type could be a database model, or it could be a single string, or it could be an INT if the query is a SELECT COUNT().</para>
            </summary>
            <param name="query"></param>
            <param name="parms">Optional set of parameters that matches the query.</param>
            <param name="commandTimeout">Optional command time out value.</param>
            <returns>A single instance of type T that matches the supplied query.</returns>
        </member>
        <member name="M:Dapper.SimpleRepository.IRepositoryStrong`1.GetAll">
            <summary>
            <para>Get an IEnumerable of all records.</para>
            </summary>
            <returns>an IEnumerable of type T.</returns>
        </member>
        <member name="M:Dapper.SimpleRepository.IRepositoryStrong`1.GetAllAsync">
            <summary>
            <para>Get an IEnumerable of all records.</para>
            </summary>
            <returns>an IEnumerable of type T.</returns>
        </member>
        <member name="M:Dapper.SimpleRepository.IRepositoryStrong`1.GetList(System.String,System.Collections.Generic.Dictionary{System.String,System.Object},System.Nullable{System.Int32})">
            <summary>
            <para>Get an IEnumerable that matches the specified filter</para>
            </summary>
            <param name="where">The SQL WHERE clause.</param>
            <param name="parms">Optional set of parameters that matches the query.</param>
            <param name="commandTimeout">Optional command time out value.</param>
            <returns>An IEnumerable of type T where the data matches the supplied WHERE filter.</returns>
        </member>
        <member name="M:Dapper.SimpleRepository.IRepositoryStrong`1.GetListAsync(System.String,System.Collections.Generic.Dictionary{System.String,System.Object},System.Nullable{System.Int32})">
            <summary>
            <para>Get an IEnumerable that matches the specified filter</para>
            </summary>
            <param name="where">The SQL WHERE clause.</param>
            <param name="parms">Optional set of parameters that matches the query.</param>
            <param name="commandTimeout">Optional command time out value.</param>
            <returns>An IEnumerable of type T where the data matches the supplied WHERE filter.</returns>
        </member>
        <member name="M:Dapper.SimpleRepository.IRepositoryStrong`1.GetListFromQuery(System.String,System.Collections.Generic.Dictionary{System.String,System.Object},System.Nullable{System.Int32})">
            <summary>
            <para>Get an IEnumerable based on a custom query and any (optional) parameters</para>
            </summary>
            <param name="query"></param>
            <param name="parms">Optional set of parameters that matches the query.</param>
            <param name="commandTimeout">Optional command time out value.</param>
            <returns>An IEnumerable of type T that matches the supplied query.</returns>
        </member>
        <member name="M:Dapper.SimpleRepository.IRepositoryStrong`1.GetListFromQueryAsync(System.String,System.Collections.Generic.Dictionary{System.String,System.Object},System.Nullable{System.Int32})">
            <summary>
            <para>Get an IEnumerable based on a custom query and any (optional) parameters</para>
            </summary>
            <param name="query"></param>
            <param name="parms">Optional set of parameters that matches the query.</param>
            <param name="commandTimeout">Optional command time out value.</param>
            <returns>An IEnumerable of type T that matches the supplied query.</returns>
        </member>
        <member name="M:Dapper.SimpleRepository.IRepositoryStrong`1.GetListPaged(System.Int32,System.Int32,System.String,System.String,System.Collections.Generic.Dictionary{System.String,System.Object},System.Nullable{System.Int32})">
            <summary>
            <para>Get a paged IEnumerable of all records.</para>
            </summary>
            <param name="pageNumber">The offset (or page number) of the total set to select.</param>
            <param name="rowsPerPage">The number of total records to return per page.</param>
            <param name="where">Optional WHERE clause to filter the resutls.</param>
            <param name="orderBy">Optional ORDER BY clause to order the results.</param>
            <param name="parms">Optinal set of paramaters used in WHERE or ORDER BY clauses.</param>
            <param name="commandTimeout">Optional command time out value.</param>
            <returns>A paged IEnumerable of type T.</returns>
        </member>
        <member name="M:Dapper.SimpleRepository.IRepositoryStrong`1.GetListPagedAsync(System.Int32,System.Int32,System.String,System.String,System.Collections.Generic.Dictionary{System.String,System.Object},System.Nullable{System.Int32})">
            <summary>
            <para>Get a paged IEnumerable of all records.</para>
            </summary>
            <param name="pageNumber">The offset (or page number) of the total set to select.</param>
            <param name="rowsPerPage">The number of total records to return per page.</param>
            <param name="where">Optional WHERE clause to filter the resutls.</param>
            <param name="orderBy">Optional ORDER BY clause to order the results.</param>
            <param name="parms">Optinal set of paramaters used in WHERE or ORDER BY clauses.</param>
            <param name="commandTimeout">Optional command time out value.</param>
            <returns>A paged IEnumerable of type T.</returns>
        </member>
        <member name="M:Dapper.SimpleRepository.IRepositoryStrong`1.Update(`0,System.Nullable{System.Int32})">
            <summary>
            <para>Update an existing record.</para>
            </summary>
            <param name="entity">An instance of type T to be updated.</param>
            <param name="commandTimeout">Optional command time out value.</param>
            <returns>Number of rows affected.</returns>
        </member>
        <member name="M:Dapper.SimpleRepository.IRepositoryStrong`1.UpdateAsync(`0,System.Nullable{System.Int32})">
            <summary>
            <para>Update an existing record.</para>
            </summary>
            <param name="entity">An instance of type T to be updated.</param>
            <param name="commandTimeout">Optional command time out value.</param>
            <returns>Number of rows affected.</returns>
        </member>
        <member name="M:Dapper.SimpleRepository.IRepositoryStrong`1.Insert(`0,System.Nullable{System.Int32})">
            <summary>
            <para>Insert a new record.</para>
            </summary>
            <param name="entity">An instance of type T to be updated.</param>
            <param name="commandTimeout">Optional command time out value.</param>
            <returns>The ID (primary key) of the newly inserted record.</returns>
        </member>
        <member name="M:Dapper.SimpleRepository.IRepositoryStrong`1.InsertAsync(`0,System.Nullable{System.Int32})">
            <summary>
            <para>Insert a new record.</para>
            </summary>
            <param name="entity">An instance of type T to be updated.</param>
            <param name="commandTimeout">Optional command time out value.</param>
            <returns>The ID (primary key) of the newly inserted record.</returns>
        </member>
        <member name="M:Dapper.SimpleRepository.IRepositoryStrong`1.Delete(System.Int32,System.Nullable{System.Int32})">
            <summary>
            <para>Delete a record by primary key (id)..</para>
            </summary>
            <param name="id">The ID (primary key) of the item to be deleted.</param>
            <param name="commandTimeout">Optional command time out value.</param>
            <returns>Number of rows affected.</returns>
        </member>
        <member name="M:Dapper.SimpleRepository.IRepositoryStrong`1.DeleteAsync(System.Int32,System.Nullable{System.Int32})">
            <summary>
            <para>Delete a record by primary key (id)..</para>
            </summary>
            <param name="id">The ID (primary key) of the item to be deleted.</param>
            <param name="commandTimeout">Optional command time out value.</param>
            <returns>Number of rows affected.</returns>
        </member>
        <member name="M:Dapper.SimpleRepository.IRepositoryStrong`1.Delete(System.String,System.Collections.Generic.Dictionary{System.String,System.Object},System.Nullable{System.Int32})">
            <summary>
            <para>Delete all records that match the specified filter.</para>
            </summary>
            <param name="where">Optional WHERE clause.</param>
            <param name="parms">Optional set of parameters that matches the WHERE clause.</param>
            <param name="commandTimeout">Optional command time out value.</param>
            <returns>Number of rows affected.</returns>
        </member>
        <member name="M:Dapper.SimpleRepository.IRepositoryStrong`1.DeleteAsync(System.String,System.Collections.Generic.Dictionary{System.String,System.Object},System.Nullable{System.Int32})">
            <summary>
            <para>Delete all records that match the specified filter.</para>
            </summary>
            <param name="where">Optional WHERE clause.</param>
            <param name="parms">Optional set of parameters that matches the WHERE clause.</param>
            <param name="commandTimeout">Optional command time out value.</param>
            <returns>Number of rows affected.</returns>
        </member>
        <member name="M:Dapper.SimpleRepository.IRepositoryStrong`1.ExecuteQuery(System.String,System.Collections.Generic.Dictionary{System.String,System.Object},System.Nullable{System.Int32})">
            <summary>
            <para>Execute any custom query where a return data set it not expected.</para>
            </summary>
            <param name="query">Full SQL query.</param>
            <param name="parms">Optional set of parameters that matches the query.</param>
            <param name="commandTimeout">Optional command time out value.</param>
        </member>
        <member name="M:Dapper.SimpleRepository.IRepositoryStrong`1.ExecuteQueryAsync(System.String,System.Collections.Generic.Dictionary{System.String,System.Object},System.Nullable{System.Int32})">
            <summary>
            <para>Execute any custom query where a return data set it not expected.</para>
            </summary>
            <param name="query">Full SQL query.</param>
            <param name="parms">Optional set of parameters that matches the query.</param>
            <param name="commandTimeout">Optional command time out value.</param>
        </member>
        <member name="M:Dapper.SimpleRepository.IRepositoryStrong`1.ExecuteScalar(System.String,System.Collections.Generic.Dictionary{System.String,System.Object},System.Nullable{System.Int32})">
            <summary>
            <para>Execute any custom query where a single return item is expected. This type could be a database model, or it could be a single string, or it could be an INT if the query is a SELECT COUNT().</para>
            </summary>
            <param name="query">Full SQL query.</param>
            <param name="parms">Optional set of parameters that matches the query.</param>
            <param name="commandTimeout">Optional command time out value.</param>
            <returns>A single instance of type T that matches the supplied query.</returns>
        </member>
        <member name="M:Dapper.SimpleRepository.IRepositoryStrong`1.ExecuteScalarAsync(System.String,System.Collections.Generic.Dictionary{System.String,System.Object},System.Nullable{System.Int32})">
            <summary>
            <para>Execute any custom query where a single return item is expected. This type could be a database model, or it could be a single string, or it could be an INT if the query is a SELECT COUNT().</para>
            </summary>
            <param name="query">Full SQL query.</param>
            <param name="parms">Optional set of parameters that matches the query.</param>
            <param name="commandTimeout">Optional command time out value.</param>
            <returns>A single instance of type T that matches the supplied query.</returns>
        </member>
        <member name="M:Dapper.SimpleRepository.IRepositoryStrong`1.ExecuteSP(System.String,System.Collections.Generic.Dictionary{System.String,System.Object},System.Nullable{System.Int32})">
            <summary>
            <para>Execute any Stored Procedure where a return data set it not expected.</para>
            </summary>
            <param name="storedProcedureName">Name of the stored procedure to be executed.</param>
            <param name="parms">Optional set of parameters that matches the query.</param>
            <param name="commandTimeout">Optional command time out value.</param>
        </member>
        <member name="M:Dapper.SimpleRepository.IRepositoryStrong`1.ExecuteSPAsync(System.String,System.Collections.Generic.Dictionary{System.String,System.Object},System.Nullable{System.Int32})">
            <summary>
            <para>Execute any Stored Procedure where a return data set it not expected.</para>
            </summary>
            <param name="storedProcedureName">Name of the stored procedure to be executed.</param>
            <param name="parms">Optional set of parameters that matches the query.</param>
            <param name="commandTimeout">Optional command time out value.</param>
        </member>
        <member name="M:Dapper.SimpleRepository.IRepositoryStrong`1.ExecuteSPSingle(System.String,System.Collections.Generic.Dictionary{System.String,System.Object},System.Nullable{System.Int32})">
            <summary>
            <para>Execute any Stored Procedure where a single item is expected as a return.</para>
            </summary>
            <param name="storedProcedureName">Name of the stored procedure to be executed.</param>
            <param name="parms">Optional set of parameters that matches the query.</param>
            <param name="commandTimeout">Optional command time out value.</param>
            <returns>A single instance of type T.</returns>
        </member>
        <member name="M:Dapper.SimpleRepository.IRepositoryStrong`1.ExecuteSPSingleAsync(System.String,System.Collections.Generic.Dictionary{System.String,System.Object},System.Nullable{System.Int32})">
            <summary>
            <para>Execute any Stored Procedure where a single item is expected as a return.</para>
            </summary>
            <param name="storedProcedureName">Name of the stored procedure to be executed.</param>
            <param name="parms">Optional set of parameters that matches the query.</param>
            <param name="commandTimeout">Optional command time out value.</param>
            <returns>A single instance of type T.</returns>
        </member>
        <member name="M:Dapper.SimpleRepository.IRepositoryStrong`1.ExecuteSPList(System.String,System.Collections.Generic.Dictionary{System.String,System.Object},System.Nullable{System.Int32})">
            <summary>
            <para>Execute a Store Procedure when a List of T is expected in return.</para>
            </summary>
            <param name="storedProcedureName">Name of the stored procedure to be executed.</param>
            <param name="parms">Optional set of parameters that matches the query.</param>
            <param name="commandTimeout">Optional command time out value.</param>
            <returns>An IEnumerable of type T.</returns>
        </member>
        <member name="M:Dapper.SimpleRepository.IRepositoryStrong`1.ExecuteSPListAsync(System.String,System.Collections.Generic.Dictionary{System.String,System.Object},System.Nullable{System.Int32})">
            <summary>
            <para>Execute a Store Procedure when a List of T is expected in return.</para>
            </summary>
            <param name="storedProcedureName">Name of the stored procedure to be executed.</param>
            <param name="parms">Optional set of parameters that matches the query.</param>
            <returns>An IEnumerable of type T.</returns>
        </member>
        <member name="T:Dapper.SimpleRepository.Repository">
            <summary>
            Main class for Dapper.SimpleRepository extensions. This option is not strongly typed.
            </summary>
        </member>
        <member name="M:Dapper.SimpleRepository.Repository.#ctor(System.String)">
            <summary>
            Inject the connection string (as a string) when creating an instance of this class.
            </summary>
            <param name="connectionString"></param>
        </member>
        <member name="M:Dapper.SimpleRepository.Repository.Get``1(System.Int32,System.Nullable{System.Int32})">
            <summary>
            <para>Get a specific record by the primary key (id).</para>
            <para>Queries the table matching the type T.</para>
            </summary>
            <param name="id"></param>
            <param name="commandTimeout">Optional command time out value.</param>
            <returns>A single record of type T where the primary key matches the supplied id.</returns>
        </member>
        <member name="M:Dapper.SimpleRepository.Repository.GetAsync``1(System.Int32,System.Nullable{System.Int32})">
            <summary>
            <para>Get a specific record by the primary key (id).</para>
            <para>Queries the table matching the type T.</para>
            </summary>
            <param name="id"></param>
            <param name="commandTimeout">Optional command time out value.</param>
            <returns>A single record of type T where the primary key matches the supplied id.</returns>
        </member>
        <member name="M:Dapper.SimpleRepository.Repository.Get``1(System.String,System.Collections.Generic.Dictionary{System.String,System.Object},System.Nullable{System.Int32})">
            <summary>
            <para>Get a specific record that matches the specified filter.</para>
            <para>Queries the table matching the type T.</para>
            </summary>
            <typeparam name="T">The type that matches the database table.</typeparam>
            <param name="where">The SQL WHERE clause.</param>
            <param name="parms">Optional set of parameters that matches the query.</param>
            <param name="commandTimeout">Optional command time out value.</param>
            <returns>A single record of type T where the data matches the supplied WHERE filter.</returns>
        </member>
        <member name="M:Dapper.SimpleRepository.Repository.GetAsync``1(System.String,System.Collections.Generic.Dictionary{System.String,System.Object},System.Nullable{System.Int32})">
            <summary>
            <para>Get a specific record that matches the specified filter</para>
            <para>Queries the table matching the type T.</para>
            </summary>
            <typeparam name="T">The type that matches the database table.</typeparam>
            <param name="where">The SQL WHERE clause.</param>
            <param name="parms">Optional set of parameters that matches the query.</param>
            <param name="commandTimeout">Optional command time out value.</param>
            <returns>A single record of type T where the data matches the supplied WHERE filter.</returns>
        </member>
        <member name="M:Dapper.SimpleRepository.Repository.GetFromQuery``1(System.String,System.Collections.Generic.Dictionary{System.String,System.Object},System.Nullable{System.Int32})">
            <summary>
            <para>Get a specific type from a query. This type could be a database model, or it could be a single string, or it could be an INT if the query is a SELECT COUNT().</para>
            <para>Queries the table matching the type T.</para>
            </summary>
            <typeparam name="T">The type that matches the database table.</typeparam>
            <param name="query"></param>
            <param name="parms">Optional set of parameters that matches the query.</param>
            <param name="commandTimeout">Optional command time out value.</param>
            <returns>A single instance of type T that matches the supplied query.</returns>
        </member>
        <member name="M:Dapper.SimpleRepository.Repository.GetFromQueryAsync``1(System.String,System.Collections.Generic.Dictionary{System.String,System.Object},System.Nullable{System.Int32})">
            <summary>
            <para>Get a specific type from a query.  This type could be a database model, or it could be a single string, or it could be an INT if the query is a SELECT COUNT().</para>
            <para>Queries the table matching the type T.</para>
            </summary>
            <typeparam name="T">The type that matches the database table.</typeparam>
            <param name="query"></param>
            <param name="parms">Optional set of parameters that matches the query.</param>
            <param name="commandTimeout">Optional command time out value.</param>
            <returns>A single instance of type T that matches the supplied query.</returns>
        </member>
        <member name="M:Dapper.SimpleRepository.Repository.GetAll``1">
            <summary>
            <para>Get an IEnumerable of all records.</para>
            <para>Queries the table matching the type T.</para>
            </summary>
            <returns>an IEnumerable of type T.</returns>
        </member>
        <member name="M:Dapper.SimpleRepository.Repository.GetAllAsync``1">
            <summary>
            <para>Get an IEnumerable of all records.</para>
            <para>Queries the table matching the type T.</para>
            </summary>
            <returns>An IEnumerable of type T.</returns>
        </member>
        <member name="M:Dapper.SimpleRepository.Repository.GetList``1(System.String,System.Collections.Generic.Dictionary{System.String,System.Object},System.Nullable{System.Int32})">
            <summary>
            <para>Get an IEnumerable that matches the specified filter</para>
            <para>Queries the table matching the type T.</para>
            </summary>
            <typeparam name="T">The type that matches the database table.</typeparam>
            <param name="where">The SQL WHERE clause.</param>
            <param name="parms">Optional set of parameters that matches the query.</param>
            <param name="commandTimeout">Optional command time out value.</param>
            <returns>An IEnumerable of type T where the data matches the supplied WHERE filter.</returns>
        </member>
        <member name="M:Dapper.SimpleRepository.Repository.GetListAsync``1(System.String,System.Collections.Generic.Dictionary{System.String,System.Object},System.Nullable{System.Int32})">
            <summary>
            <para>Get an IEnumerable that matches the specified filter</para>
            <para>Queries the table matching the type T.</para>
            </summary>
            <typeparam name="T">The type that matches the database table.</typeparam>
            <param name="where">The SQL WHERE clause.</param>
            <param name="parms">Optional set of parameters that matches the query.</param>
            <param name="commandTimeout">Optional command time out value.</param>
            <returns>An IEnumerable of type T where the data matches the supplied WHERE filter.</returns>
        </member>
        <member name="M:Dapper.SimpleRepository.Repository.GetListFromQuery``1(System.String,System.Collections.Generic.Dictionary{System.String,System.Object},System.Nullable{System.Int32})">
            <summary>
            <para>Get an IEnumerable based on a custom query and any (optional) parameters</para>
            <para>Queries the table matching the type T.</para>
            </summary>
            <typeparam name="T">The type that matches the database table.</typeparam>
            <param name="query"></param>
            <param name="parms">Optional set of parameters that matches the query.</param>
            <param name="commandTimeout">Optional command time out value.</param>
            <returns>An IEnumerable of type T that matches the supplied query.</returns>
        </member>
        <member name="M:Dapper.SimpleRepository.Repository.GetListFromQueryAsync``1(System.String,System.Collections.Generic.Dictionary{System.String,System.Object},System.Nullable{System.Int32})">
            <summary>
            <para>Get an IEnumerable based on a custom query and any (optional) parameters</para>
            <para>Queries the table matching the type T.</para>
            </summary>
            <typeparam name="T">The type that matches the database table.</typeparam>
            <param name="query"></param>
            <param name="parms">Optional set of parameters that matches the query.</param>
            <param name="commandTimeout">Optional command time out value.</param>
            <returns>An IEnumerable of type T that matches the supplied query.</returns>
        </member>
        <member name="M:Dapper.SimpleRepository.Repository.GetListPaged``1(System.Int32,System.Int32,System.String,System.String,System.Collections.Generic.Dictionary{System.String,System.Object},System.Nullable{System.Int32})">
            <summary>
            <para>Get a paged IEnumerable of all records.</para>
            <para>Queries the table matching the type T.</para>
            </summary>
            <typeparam name="T">The type that matches the database table.</typeparam>
            <param name="pageNumber">The offset (or page number) of the total set to select.</param>
            <param name="rowsPerPage">The number of total records to return per page.</param>
            <param name="where">Optional WHERE clause to filter the resutls.</param>
            <param name="orderBy">Optional ORDER BY clause to order the results.</param>
            <param name="parms">Optinal set of paramaters used in WHERE or ORDER BY clauses.</param>
            <param name="commandTimeout">Optional command time out value.</param>
            <returns>A paged IEnumerable of type T.</returns>
        </member>
        <member name="M:Dapper.SimpleRepository.Repository.GetListPagedAsync``1(System.Int32,System.Int32,System.String,System.String,System.Collections.Generic.Dictionary{System.String,System.Object},System.Nullable{System.Int32})">
            <summary>
            <para>Get a paged IEnumerable of all records.</para>
            <para>Queries the table matching the type T.</para>
            </summary>
            <typeparam name="T">The type that matches the database table.</typeparam>
            <param name="pageNumber">The offset (or page number) of the total set to select.</param>
            <param name="rowsPerPage">The number of total records to return per page.</param>
            <param name="where">Optional WHERE clause to filter the resutls.</param>
            <param name="orderBy">Optional ORDER BY clause to order the results.</param>
            <param name="parms">Optinal set of paramaters used in WHERE or ORDER BY clauses.</param>
            <param name="commandTimeout">Optional command time out value.</param>
            <returns>A paged IEnumerable of type T.</returns>
        </member>
        <member name="M:Dapper.SimpleRepository.Repository.Update``1(``0,System.Nullable{System.Int32})">
            <summary>
            <para>Update an existing record.</para>
            <para>Queries the table matching the type T.</para>
            </summary>
            <param name="entity">An instance of type T to be updated.</param>
            <param name="commandTimeout">Optional command time out value.</param>
            <returns>Number of rows affected.</returns>
        </member>
        <member name="M:Dapper.SimpleRepository.Repository.UpdateAsync``1(``0,System.Nullable{System.Int32})">
            <summary>
            <para>Update an existing record.</para>
            <para>Queries the table matching the type T.</para>
            </summary>
            <param name="entity">An instance of type T to be updated.</param>
            <param name="commandTimeout"></param>
            <returns>Number of rows affected.</returns>
        </member>
        <member name="M:Dapper.SimpleRepository.Repository.Insert``1(``0,System.Nullable{System.Int32})">
            <summary>
            <para>Insert a new record.</para>
            <para>Inserts into the table matching the type T.</para>
            </summary>
            <param name="entity">An instance of type T to be updated.</param>
            <param name="commandTimeout">Optional command time out value.</param>
            <returns>The ID (primary key) of the newly inserted record.</returns>
        </member>
        <member name="M:Dapper.SimpleRepository.Repository.InsertAsync``1(``0,System.Nullable{System.Int32})">
            <summary>
            <para>Insert a new record.</para>
            <para>Inserts into the table matching the type T.</para>
            </summary>
            <param name="entity">An instance of type T to be updated.</param>
            <param name="commandTimeout">Optional command time out value.</param>
            <returns>The ID (primary key) of the newly inserted record.</returns>
        </member>
        <member name="M:Dapper.SimpleRepository.Repository.Delete``1(System.Int32,System.Nullable{System.Int32})">
            <summary>
            <para>Delete a record by primary key (id).</para>
            <para>Deletes from the table matching the type T.</para>
            </summary>
            <param name="id">The ID (primary key) of the item to be deleted.</param>
            <param name="commandTimeout">Optional command time out value.</param>
            <returns>Number of rows affected.</returns>
        </member>
        <member name="M:Dapper.SimpleRepository.Repository.DeleteAsync``1(System.Int32,System.Nullable{System.Int32})">
            <summary>
            <para>Delete a record by primary key (id).</para>
            <para>Deletes from the table matching the type T.</para>
            </summary>
            <param name="id">The ID (primary key) of the item to be deleted.</param>
            <param name="commandTimeout">Optional command time out value.</param>
            <returns>Number of rows affected.</returns>
        </member>
        <member name="M:Dapper.SimpleRepository.Repository.Delete``1(System.String,System.Collections.Generic.Dictionary{System.String,System.Object},System.Nullable{System.Int32})">
            <summary>
            <para>Delete all records that match the specified filter.</para>
            <para>Deletes from the table matching the type T.</para>
            </summary>
            <param name="where">Optional WHERE clause.</param>
            <param name="parms">Optional set of parameters that matches the WHERE clause.</param>
            <param name="commandTimeout">Optional command time out value.</param>
            <returns>Number of rows affected.</returns>
        </member>
        <member name="M:Dapper.SimpleRepository.Repository.DeleteAsync``1(System.String,System.Collections.Generic.Dictionary{System.String,System.Object},System.Nullable{System.Int32})">
            <summary>
            <para>Delete all records that match the specified filter.</para>
            <para>Deletes from the table matching the type T.</para>
            </summary>
            <param name="where">Optional WHERE clause.</param>
            <param name="parms">Optional set of parameters that matches the WHERE clause.</param>
            <param name="commandTimeout">Optional command time out value.</param>
            <returns>Number of rows affected.</returns>
        </member>
        <member name="M:Dapper.SimpleRepository.Repository.ExecuteQuery``1(System.String,System.Collections.Generic.Dictionary{System.String,System.Object},System.Nullable{System.Int32})">
            <summary>
            <para>Execute any custom query where a return data set it not expected.</para>
            <para>Queries the table matching the type T.</para>
            </summary>
            <typeparam name="T">The type that matches the database table.</typeparam>
            <param name="query">Full SQL query.</param>
            <param name="parms">Optional set of parameters that matches the query.</param>
            <param name="commandTimeout">Optional command time out value.</param>
        </member>
        <member name="M:Dapper.SimpleRepository.Repository.ExecuteQueryAsync``1(System.String,System.Collections.Generic.Dictionary{System.String,System.Object},System.Nullable{System.Int32})">
            <summary>
            <para>Execute any custom query where a return data set it not expected.</para>
            <para>Queries the table matching the type T.</para>
            </summary>
            <typeparam name="T">The type that matches the database table.</typeparam>
            <param name="query">Full SQL query.</param>
            <param name="parms">Optional set of parameters that matches the query.</param>
            <param name="commandTimeout">Optional command time out value.</param>
        </member>
        <member name="M:Dapper.SimpleRepository.Repository.ExecuteScalar``1(System.String,System.Collections.Generic.Dictionary{System.String,System.Object},System.Nullable{System.Int32})">
            <summary>
            <para>Execute any custom query where a single return item is expected. This type could be a database model, or it could be a single string, or it could be an INT if the query is a SELECT COUNT().</para>
            <para>Queries the table matching the type T.</para>
            </summary>
            <param name="query">Full SQL query.</param>
            <param name="parms">Optional set of parameters that matches the query.</param>
            <param name="commandTimeout">Optional command time out value.</param>
            <returns>A single instance of type T that matches the supplied query.</returns>
        </member>
        <member name="M:Dapper.SimpleRepository.Repository.ExecuteScalarAsync``1(System.String,System.Collections.Generic.Dictionary{System.String,System.Object},System.Nullable{System.Int32})">
            <summary>
            <para>Execute any custom query where a single return item is expected. This type could be a database model, or it could be a single string, or it could be an INT if the query is a SELECT COUNT().</para>
            <para>Queries the table matching the type T.</para>
            </summary>
            <param name="query">Full SQL query.</param>
            <param name="parms">Optional set of parameters that matches the query.</param>
            <param name="commandTimeout">Optional command time out value.</param>
            <returns>A single instance of type T that matches the supplied query.</returns>
        </member>
        <member name="M:Dapper.SimpleRepository.Repository.ExecuteSP(System.String,System.Collections.Generic.Dictionary{System.String,System.Object},System.Nullable{System.Int32})">
            <summary>
            <para>Execute any Stored Procedure where a return data set it not expected.</para>
            </summary>
            <param name="storedProcedureName">Name of the stored procedure to be executed.</param>
            <param name="parms">Optional set of parameters that matches the query.</param>
            <param name="commandTimeout">Optional command time out value.</param>
        </member>
        <member name="M:Dapper.SimpleRepository.Repository.ExecuteSPAsync(System.String,System.Collections.Generic.Dictionary{System.String,System.Object},System.Nullable{System.Int32})">
            <summary>
            <para>Execute any Stored Procedure where a return data set it not expected.</para>
            </summary>
            <param name="storedProcedureName">Name of the stored procedure to be executed.</param>
            <param name="parms">Optional set of parameters that matches the query.</param>
            <param name="commandTimeout">Optional command time out value.</param>
        </member>
        <member name="M:Dapper.SimpleRepository.Repository.ExecuteSPSingle``1(System.String,System.Collections.Generic.Dictionary{System.String,System.Object},System.Nullable{System.Int32})">
            <summary>
            <para>Execute any Stored Procedure where a single item is expected as a return.</para>
            </summary>
            <typeparam name="T">The type that matches the database table.</typeparam>
            <param name="storedProcedureName">Name of the stored procedure to be executed.</param>
            <param name="parms">Optional set of parameters that matches the query.</param>
            <param name="commandTimeout">Optional command time out value.</param>
            <returns>A single instance of type T.</returns>
        </member>
        <member name="M:Dapper.SimpleRepository.Repository.ExecuteSPSingleAsync``1(System.String,System.Collections.Generic.Dictionary{System.String,System.Object},System.Nullable{System.Int32})">
            <summary>
            <para>Execute any Stored Procedure where a single item is expected as a return.</para>
            </summary>
            <typeparam name="T">The type that matches the database table.</typeparam>
            <param name="storedProcedureName">Name of the stored procedure to be executed.</param>
            <param name="parms">Optional set of parameters that matches the query.</param>
            <param name="commandTimeout">Optional command time out value.</param>
            <returns>A single instance of type T.</returns>
        </member>
        <member name="M:Dapper.SimpleRepository.Repository.ExecuteSPList``1(System.String,System.Collections.Generic.Dictionary{System.String,System.Object},System.Nullable{System.Int32})">
            <summary>
            <para>Execute a Store Procedure when a List of T is expected in return.</para>
            </summary>
            <typeparam name="T">The type that matches the database table.</typeparam>
            <param name="storedProcedureName">Name of the stored procedure to be executed.</param>
            <param name="parms">Optional set of parameters that matches the query.</param>
            <param name="commandTimeout">Optional command time out value.</param>
            <returns>An IEnumerable of type T.</returns>
        </member>
        <member name="M:Dapper.SimpleRepository.Repository.ExecuteSPListAsync``1(System.String,System.Collections.Generic.Dictionary{System.String,System.Object},System.Nullable{System.Int32})">
            <summary>
            <para>Execute a Store Procedure when a List of T is expected in return.</para>
            </summary>
            <typeparam name="T">The type that matches the database table.</typeparam>
            <param name="storedProcedureName">Name of the stored procedure to be executed.</param>
            <param name="parms">Optional set of parameters that matches the query.</param>
            <param name="commandTimeout">Optional command time out value.</param>
            <returns>An IEnumerable of type T.</returns>
        </member>
        <member name="T:Dapper.SimpleRepository.Repository`1">
            <summary>
            Main class for Dapper.SimpleRepository extensions. This option is strongly typed.
            </summary>
            <typeparam name="T">The type that matches the database table.</typeparam>
        </member>
        <member name="M:Dapper.SimpleRepository.Repository`1.#ctor(System.String)">
            <summary>
            Inject the connection string (as a string) when creating an instance of this class.
            </summary>
            <param name="connectionString"></param>
        </member>
        <member name="M:Dapper.SimpleRepository.Repository`1.Get(System.Int32,System.Nullable{System.Int32})">
            <summary>
            <para>Get a specific record by the primary key (id).</para>
            </summary>
            <param name="id"></param>
            <param name="commandTimeout">Optional command time out value.</param>
            <returns>A single record of type T where the primary key matches the supplied id.</returns>
        </member>
        <member name="M:Dapper.SimpleRepository.Repository`1.GetAsync(System.Int32,System.Nullable{System.Int32})">
            <summary>
            <para>Get a specific record by the primary key (id).</para>
            </summary>
            <param name="id"></param>
            <param name="commandTimeout">Optional command time out value.</param>
            <returns>A single record of type T where the primary key matches the supplied id.</returns>
        </member>
        <member name="M:Dapper.SimpleRepository.Repository`1.Get(System.String,System.Collections.Generic.Dictionary{System.String,System.Object},System.Nullable{System.Int32})">
            <summary>
            <para>Get a specific record that matches the specified filter.</para>
            </summary>
            <param name="where">The SQL WHERE clause.</param>
            <param name="parms">Optional set of parameters that matches the query.</param>
            <param name="commandTimeout">Optional command time out value.</param>
            <returns>A single record of type T where the data matches the supplied WHERE filter.</returns>
        </member>
        <member name="M:Dapper.SimpleRepository.Repository`1.GetAsync(System.String,System.Collections.Generic.Dictionary{System.String,System.Object},System.Nullable{System.Int32})">
            <summary>
            <para>Get a specific record that matches the specified filter.</para>
            </summary>
            <param name="where">The SQL WHERE clause.</param>
            <param name="parms">Optional set of parameters that matches the query.</param>
            <param name="commandTimeout">Optional command time out value.</param>
            <returns>A single record of type T where the data matches the supplied WHERE filter.</returns>
        </member>
        <member name="M:Dapper.SimpleRepository.Repository`1.GetFromQuery(System.String,System.Collections.Generic.Dictionary{System.String,System.Object},System.Nullable{System.Int32})">
            <summary>
            <para>Get a specific type from a query. This type could be a database model, or it could be a single string, or it could be an INT if the query is a SELECT COUNT().</para>
            </summary>
            <param name="query"></param>
            <param name="parms">Optional set of parameters that matches the query.</param>
            <param name="commandTimeout">Optional command time out value.</param>
            <returns>A single instance of type T that matches the supplied query.</returns>
        </member>
        <member name="M:Dapper.SimpleRepository.Repository`1.GetFromQueryAsync(System.String,System.Collections.Generic.Dictionary{System.String,System.Object},System.Nullable{System.Int32})">
            <summary>
            <para>Get a specific type from a query. This type could be a database model, or it could be a single string, or it could be an INT if the query is a SELECT COUNT().</para>
            </summary>
            <param name="query"></param>
            <param name="parms">Optional set of parameters that matches the query.</param>
            <param name="commandTimeout">Optional command time out value.</param>
            <returns>A single instance of type T that matches the supplied query.</returns>
        </member>
        <member name="M:Dapper.SimpleRepository.Repository`1.GetAll">
            <summary>
            <para>Get an IEnumerable of all records.</para>
            </summary>
            <returns>an IEnumerable of type T.</returns>
        </member>
        <member name="M:Dapper.SimpleRepository.Repository`1.GetAllAsync">
            <summary>
            <para>Get an IEnumerable of all records.</para>
            </summary>
            <returns>an IEnumerable of type T.</returns>
        </member>
        <member name="M:Dapper.SimpleRepository.Repository`1.GetList(System.String,System.Collections.Generic.Dictionary{System.String,System.Object},System.Nullable{System.Int32})">
            <summary>
            <para>Get an IEnumerable that matches the specified filter</para>
            </summary>
            <param name="where">The SQL WHERE clause.</param>
            <param name="parms">Optional set of parameters that matches the query.</param>
            <param name="commandTimeout">Optional command time out value.</param>
            <returns>An IEnumerable of type T where the data matches the supplied WHERE filter.</returns>
        </member>
        <member name="M:Dapper.SimpleRepository.Repository`1.GetListAsync(System.String,System.Collections.Generic.Dictionary{System.String,System.Object},System.Nullable{System.Int32})">
            <summary>
            <para>Get an IEnumerable that matches the specified filter</para>
            </summary>
            <param name="where">The SQL WHERE clause.</param>
            <param name="parms">Optional set of parameters that matches the query.</param>
            <param name="commandTimeout">Optional command time out value.</param>
            <returns>An IEnumerable of type T where the data matches the supplied WHERE filter.</returns>
        </member>
        <member name="M:Dapper.SimpleRepository.Repository`1.GetListFromQuery(System.String,System.Collections.Generic.Dictionary{System.String,System.Object},System.Nullable{System.Int32})">
            <summary>
            <para>Get an IEnumerable based on a custom query and any (optional) parameters</para>
            </summary>
            <param name="query"></param>
            <param name="parms">Optional set of parameters that matches the query.</param>
            <param name="commandTimeout">Optional command time out value.</param>
            <returns>An IEnumerable of type T that matches the supplied query.</returns>
        </member>
        <member name="M:Dapper.SimpleRepository.Repository`1.GetListFromQueryAsync(System.String,System.Collections.Generic.Dictionary{System.String,System.Object},System.Nullable{System.Int32})">
            <summary>
            <para>Get an IEnumerable based on a custom query and any (optional) parameters</para>
            </summary>
            <param name="query"></param>
            <param name="parms">Optional set of parameters that matches the query.</param>
            <param name="commandTimeout">Optional command time out value.</param>
            <returns>An IEnumerable of type T that matches the supplied query.</returns>
        </member>
        <member name="M:Dapper.SimpleRepository.Repository`1.GetListPaged(System.Int32,System.Int32,System.String,System.String,System.Collections.Generic.Dictionary{System.String,System.Object},System.Nullable{System.Int32})">
            <summary>
            <para>Get a paged IEnumerable of all records.</para>
            </summary>
            <param name="pageNumber">The offset (or page number) of the total set to select.</param>
            <param name="rowsPerPage">The number of total records to return per page.</param>
            <param name="where">Optional WHERE clause to filter the resutls.</param>
            <param name="orderBy">Optional ORDER BY clause to order the results.</param>
            <param name="parms">Optinal set of paramaters used in WHERE or ORDER BY clauses.</param>
            <param name="commandTimeout">Optional command time out value.</param>
            <returns>A paged IEnumerable of type T.</returns>
        </member>
        <member name="M:Dapper.SimpleRepository.Repository`1.GetListPagedAsync(System.Int32,System.Int32,System.String,System.String,System.Collections.Generic.Dictionary{System.String,System.Object},System.Nullable{System.Int32})">
            <summary>
            <para>Get a paged IEnumerable of all records.</para>
            </summary>
            <param name="pageNumber">The offset (or page number) of the total set to select.</param>
            <param name="rowsPerPage">The number of total records to return per page.</param>
            <param name="where">Optional WHERE clause to filter the resutls.</param>
            <param name="orderBy">Optional ORDER BY clause to order the results.</param>
            <param name="parms">Optinal set of paramaters used in WHERE or ORDER BY clauses.</param>
            <param name="commandTimeout">Optional command time out value.</param>
            <returns>A paged IEnumerable of type T.</returns>
        </member>
        <member name="M:Dapper.SimpleRepository.Repository`1.Update(`0,System.Nullable{System.Int32})">
            <summary>
            <para>Update an existing record.</para>
            </summary>
            <param name="entity">An instance of type T to be updated.</param>
            <param name="commandTimeout">Optional command time out value.</param>
            <returns>Number of rows affected.</returns>
        </member>
        <member name="M:Dapper.SimpleRepository.Repository`1.UpdateAsync(`0,System.Nullable{System.Int32})">
            <summary>
            <para>Update an existing record.</para>
            </summary>
            <param name="entity">An instance of type T to be updated.</param>
            <param name="commandTimeout">Optional command time out value.</param>
            <returns>Number of rows affected.</returns>
        </member>
        <member name="M:Dapper.SimpleRepository.Repository`1.Insert(`0,System.Nullable{System.Int32})">
            <summary>
            <para>Insert a new record.</para>
            </summary>
            <param name="entity">An instance of type T to be updated.</param>
            <param name="commandTimeout">Optional command time out value.</param>
            <returns>The ID (primary key) of the newly inserted record.</returns>
        </member>
        <member name="M:Dapper.SimpleRepository.Repository`1.InsertAsync(`0,System.Nullable{System.Int32})">
            <summary>
            <para>Insert a new record.</para>
            </summary>
            <param name="entity">An instance of type T to be updated.</param>
            <param name="commandTimeout">Optional command time out value.</param>
            <returns>The ID (primary key) of the newly inserted record.</returns>
        </member>
        <member name="M:Dapper.SimpleRepository.Repository`1.Delete(System.Int32,System.Nullable{System.Int32})">
            <summary>
            <para>Delete a record by primary key (id)..</para>
            </summary>
            <param name="id">The ID (primary key) of the item to be deleted.</param>
            <param name="commandTimeout">Optional command time out value.</param>
            <returns>Number of rows affected.</returns>
        </member>
        <member name="M:Dapper.SimpleRepository.Repository`1.DeleteAsync(System.Int32,System.Nullable{System.Int32})">
            <summary>
            <para>Delete a record by primary key (id)..</para>
            </summary>
            <param name="id">The ID (primary key) of the item to be deleted.</param>
            <param name="commandTimeout">Optional command time out value.</param>
            <returns>Number of rows affected.</returns>
        </member>
        <member name="M:Dapper.SimpleRepository.Repository`1.Delete(System.String,System.Collections.Generic.Dictionary{System.String,System.Object},System.Nullable{System.Int32})">
            <summary>
            <para>Delete all records that match the specified filter.</para>
            </summary>
            <param name="where">Optional WHERE clause.</param>
            <param name="parms">Optional set of parameters that matches the WHERE clause.</param>
            <param name="commandTimeout">Optional command time out value.</param>
            <returns>Number of rows affected.</returns>
        </member>
        <member name="M:Dapper.SimpleRepository.Repository`1.DeleteAsync(System.String,System.Collections.Generic.Dictionary{System.String,System.Object},System.Nullable{System.Int32})">
            <summary>
            <para>Delete all records that match the specified filter.</para>
            </summary>
            <param name="where">Optional WHERE clause.</param>
            <param name="parms">Optional set of parameters that matches the WHERE clause.</param>
            <param name="commandTimeout">Optional command time out value.</param>
            <returns>Number of rows affected.</returns>
        </member>
        <member name="M:Dapper.SimpleRepository.Repository`1.ExecuteQuery(System.String,System.Collections.Generic.Dictionary{System.String,System.Object},System.Nullable{System.Int32})">
            <summary>
            <para>Execute any custom query where a return data set it not expected.</para>
            </summary>
            <param name="query">Full SQL query.</param>
            <param name="parms">Optional set of parameters that matches the query.</param>
            <param name="commandTimeout">Optional command time out value.</param>
        </member>
        <member name="M:Dapper.SimpleRepository.Repository`1.ExecuteQueryAsync(System.String,System.Collections.Generic.Dictionary{System.String,System.Object},System.Nullable{System.Int32})">
            <summary>
            <para>Execute any custom query where a return data set it not expected.</para>
            </summary>
            <param name="query">Full SQL query.</param>
            <param name="parms">Optional set of parameters that matches the query.</param>
            <param name="commandTimeout">Optional command time out value.</param>
        </member>
        <member name="M:Dapper.SimpleRepository.Repository`1.ExecuteScalar(System.String,System.Collections.Generic.Dictionary{System.String,System.Object},System.Nullable{System.Int32})">
            <summary>
            <para>Execute any custom query where a single return item is expected. This type could be a database model, or it could be a single string, or it could be an INT if the query is a SELECT COUNT().</para>
            </summary>
            <param name="query">Full SQL query.</param>
            <param name="parms">Optional set of parameters that matches the query.</param>
            <param name="commandTimeout">Optional command time out value.</param>
            <returns>A single instance of type T that matches the supplied query.</returns>
        </member>
        <member name="M:Dapper.SimpleRepository.Repository`1.ExecuteScalarAsync(System.String,System.Collections.Generic.Dictionary{System.String,System.Object},System.Nullable{System.Int32})">
            <summary>
            <para>Execute any custom query where a single return item is expected. This type could be a database model, or it could be a single string, or it could be an INT if the query is a SELECT COUNT().</para>
            </summary>
            <param name="query">Full SQL query.</param>
            <param name="parms">Optional set of parameters that matches the query.</param>
            <param name="commandTimeout">Optional command time out value.</param>
            <returns>A single instance of type T that matches the supplied query.</returns>
        </member>
        <member name="M:Dapper.SimpleRepository.Repository`1.ExecuteSP(System.String,System.Collections.Generic.Dictionary{System.String,System.Object},System.Nullable{System.Int32})">
            <summary>
            <para>Execute any Stored Procedure where a return data set it not expected.</para>
            </summary>
            <param name="storedProcedureName">Name of the stored procedure to be executed.</param>
            <param name="parms">Optional set of parameters that matches the query.</param>
            <param name="commandTimeout">Optional command time out value.</param>
        </member>
        <member name="M:Dapper.SimpleRepository.Repository`1.ExecuteSPAsync(System.String,System.Collections.Generic.Dictionary{System.String,System.Object},System.Nullable{System.Int32})">
            <summary>
            <para>Execute any Stored Procedure where a return data set it not expected.</para>
            </summary>
            <param name="storedProcedureName">Name of the stored procedure to be executed.</param>
            <param name="parms">Optional set of parameters that matches the query.</param>
            <param name="commandTimeout">Optional command time out value.</param>
        </member>
        <member name="M:Dapper.SimpleRepository.Repository`1.ExecuteSPSingle(System.String,System.Collections.Generic.Dictionary{System.String,System.Object},System.Nullable{System.Int32})">
            <summary>
            <para>Execute any Stored Procedure where a single item is expected as a return.</para>
            </summary>
            <param name="storedProcedureName">Name of the stored procedure to be executed.</param>
            <param name="parms">Optional set of parameters that matches the query.</param>
            <param name="commandTimeout">Optional command time out value.</param>
            <returns>A single instance of type T.</returns>
        </member>
        <member name="M:Dapper.SimpleRepository.Repository`1.ExecuteSPSingleAsync(System.String,System.Collections.Generic.Dictionary{System.String,System.Object},System.Nullable{System.Int32})">
            <summary>
            <para>Execute any Stored Procedure where a single item is expected as a return.</para>
            </summary>
            <param name="storedProcedureName">Name of the stored procedure to be executed.</param>
            <param name="parms">Optional set of parameters that matches the query.</param>
            <param name="commandTimeout">Optional command time out value.</param>
            <returns>A single instance of type T.</returns>
        </member>
        <member name="M:Dapper.SimpleRepository.Repository`1.ExecuteSPList(System.String,System.Collections.Generic.Dictionary{System.String,System.Object},System.Nullable{System.Int32})">
            <summary>
            <para>Execute a Store Procedure when a List of T is expected in return.</para>
            </summary>
            <param name="storedProcedureName">Name of the stored procedure to be executed.</param>
            <param name="parms">Optional set of parameters that matches the query.</param>
            <param name="commandTimeout">Optional command time out value.</param>
            <returns>An IEnumerable of type T.</returns>
        </member>
        <member name="M:Dapper.SimpleRepository.Repository`1.ExecuteSPListAsync(System.String,System.Collections.Generic.Dictionary{System.String,System.Object},System.Nullable{System.Int32})">
            <summary>
            <para>Execute a Store Procedure when a List of T is expected in return.</para>
            </summary>
            <param name="storedProcedureName">Name of the stored procedure to be executed.</param>
            <param name="parms">Optional set of parameters that matches the query.</param>
            <param name="commandTimeout">Optional command time out value.</param>
            <returns>An IEnumerable of type T.</returns>
        </member>
        <member name="T:Dapper.SimpleRepository.SimpleCRUD">
            <summary>
            Main class for Dapper.SimpleCRUD extensions
            </summary>
            <summary>
            Main class for Dapper.SimpleCRUD extensions
            </summary>
        </member>
        <member name="M:Dapper.SimpleRepository.SimpleCRUD.StringBuilderCache(System.Text.StringBuilder,System.String,System.Action{System.Text.StringBuilder})">
            <summary>
            Append a Cached version of a strinbBuilderAction result based on a cacheKey
            </summary>
            <param name="sb"></param>
            <param name="cacheKey"></param>
            <param name="stringBuilderAction"></param>
        </member>
        <member name="M:Dapper.SimpleRepository.SimpleCRUD.GetDialect">
            <summary>
            Returns the current dialect name
            </summary>
            <returns></returns>
        </member>
        <member name="M:Dapper.SimpleRepository.SimpleCRUD.SetDialect(Dapper.SimpleRepository.SimpleCRUD.Dialect)">
            <summary>
            Sets the database dialect 
            </summary>
            <param name="dialect"></param>
        </member>
        <member name="M:Dapper.SimpleRepository.SimpleCRUD.SetTableNameResolver(Dapper.SimpleRepository.SimpleCRUD.ITableNameResolver)">
            <summary>
            Sets the table name resolver
            </summary>
            <param name="resolver">The resolver to use when requesting the format of a table name</param>
        </member>
        <member name="M:Dapper.SimpleRepository.SimpleCRUD.SetColumnNameResolver(Dapper.SimpleRepository.SimpleCRUD.IColumnNameResolver)">
            <summary>
            Sets the column name resolver
            </summary>
            <param name="resolver">The resolver to use when requesting the format of a column name</param>
        </member>
        <member name="M:Dapper.SimpleRepository.SimpleCRUD.Get``1(System.Data.IDbConnection,System.Object,System.Data.IDbTransaction,System.Nullable{System.Int32})">
            <summary>
            <para>By default queries the table matching the class name</para>
            <para>-Table name can be overridden by adding an attribute on your class [Table("YourTableName")]</para>
            <para>By default filters on the Id column</para>
            <para>-Id column name can be overridden by adding an attribute on your primary key property [Key]</para>
            <para>Supports transaction and command timeout</para>
            <para>Returns a single entity by a single id from table T</para>
            </summary>
            <typeparam name="T"></typeparam>
            <param name="connection"></param>
            <param name="id"></param>
            <param name="transaction"></param>
            <param name="commandTimeout"></param>
            <returns>Returns a single entity by a single id from table T.</returns>
        </member>
        <member name="M:Dapper.SimpleRepository.SimpleCRUD.GetList``1(System.Data.IDbConnection,System.Object,System.Data.IDbTransaction,System.Nullable{System.Int32})">
            <summary>
            <para>By default queries the table matching the class name</para>
            <para>-Table name can be overridden by adding an attribute on your class [Table("YourTableName")]</para>
            <para>whereConditions is an anonymous type to filter the results ex: new {Category = 1, SubCategory=2}</para>
            <para>Supports transaction and command timeout</para>
            <para>Returns a list of entities that match where conditions</para>
            </summary>
            <typeparam name="T"></typeparam>
            <param name="connection"></param>
            <param name="whereConditions"></param>
            <param name="transaction"></param>
            <param name="commandTimeout"></param>
            <returns>Gets a list of entities with optional exact match where conditions</returns>
        </member>
        <member name="M:Dapper.SimpleRepository.SimpleCRUD.GetList``1(System.Data.IDbConnection,System.String,System.Object,System.Data.IDbTransaction,System.Nullable{System.Int32})">
            <summary>
            <para>By default queries the table matching the class name</para>
            <para>-Table name can be overridden by adding an attribute on your class [Table("YourTableName")]</para>
            <para>conditions is an SQL where clause and/or order by clause ex: "where name='bob'" or "where age>=@Age"</para>
            <para>parameters is an anonymous type to pass in named parameter values: new { Age = 15 }</para>
            <para>Supports transaction and command timeout</para>
            <para>Returns a list of entities that match where conditions</para>
            </summary>
            <typeparam name="T"></typeparam>
            <param name="connection"></param>
            <param name="conditions"></param>
            <param name="parameters"></param>
            <param name="transaction"></param>
            <param name="commandTimeout"></param>
            <returns>Gets a list of entities with optional SQL where conditions</returns>
        </member>
        <member name="M:Dapper.SimpleRepository.SimpleCRUD.GetList``1(System.Data.IDbConnection)">
            <summary>
            <para>By default queries the table matching the class name</para>
            <para>-Table name can be overridden by adding an attribute on your class [Table("YourTableName")]</para>
            <para>Returns a list of all entities</para>
            </summary>
            <typeparam name="T"></typeparam>
            <param name="connection"></param>
            <returns>Gets a list of all entities</returns>
        </member>
        <member name="M:Dapper.SimpleRepository.SimpleCRUD.GetListPaged``1(System.Data.IDbConnection,System.Int32,System.Int32,System.String,System.String,System.Object,System.Data.IDbTransaction,System.Nullable{System.Int32})">
            <summary>
            <para>By default queries the table matching the class name</para>
            <para>-Table name can be overridden by adding an attribute on your class [Table("YourTableName")]</para>
            <para>conditions is an SQL where clause ex: "where name='bob'" or "where age>=@Age" - not required </para>
            <para>orderby is a column or list of columns to order by ex: "lastname, age desc" - not required - default is by primary key</para>
            <para>parameters is an anonymous type to pass in named parameter values: new { Age = 15 }</para>
            <para>Supports transaction and command timeout</para>
            <para>Returns a list of entities that match where conditions</para>
            </summary>
            <typeparam name="T"></typeparam>
            <param name="connection"></param>
            <param name="pageNumber"></param>
            <param name="rowsPerPage"></param>
            <param name="conditions"></param>
            <param name="orderby"></param>
            <param name="parameters"></param>
            <param name="transaction"></param>
            <param name="commandTimeout"></param>
            <returns>Gets a paged list of entities with optional exact match where conditions</returns>
        </member>
        <member name="M:Dapper.SimpleRepository.SimpleCRUD.Insert``1(System.Data.IDbConnection,``0,System.Data.IDbTransaction,System.Nullable{System.Int32})">
            <summary>
            <para>Inserts a row into the database</para>
            <para>By default inserts into the table matching the class name</para>
            <para>-Table name can be overridden by adding an attribute on your class [Table("YourTableName")]</para>
            <para>Insert filters out Id column and any columns with the [Key] attribute</para>
            <para>Properties marked with attribute [Editable(false)] and complex types are ignored</para>
            <para>Supports transaction and command timeout</para>
            <para>Returns the ID (primary key) of the newly inserted record if it is identity using the int? type, otherwise null</para>
            </summary>
            <param name="connection"></param>
            <param name="entityToInsert"></param>
            <param name="transaction"></param>
            <param name="commandTimeout"></param>
            <returns>The ID (primary key) of the newly inserted record if it is identity using the int? type, otherwise null</returns>
        </member>
        <member name="M:Dapper.SimpleRepository.SimpleCRUD.Insert``2(System.Data.IDbConnection,``1,System.Data.IDbTransaction,System.Nullable{System.Int32})">
            <summary>
            <para>Inserts a row into the database, using ONLY the properties defined by TEntity</para>
            <para>By default inserts into the table matching the class name</para>
            <para>-Table name can be overridden by adding an attribute on your class [Table("YourTableName")]</para>
            <para>Insert filters out Id column and any columns with the [Key] attribute</para>
            <para>Properties marked with attribute [Editable(false)] and complex types are ignored</para>
            <para>Supports transaction and command timeout</para>
            <para>Returns the ID (primary key) of the newly inserted record if it is identity using the defined type, otherwise null</para>
            </summary>
            <param name="connection"></param>
            <param name="entityToInsert"></param>
            <param name="transaction"></param>
            <param name="commandTimeout"></param>
            <returns>The ID (primary key) of the newly inserted record if it is identity using the defined type, otherwise null</returns>
        </member>
        <member name="M:Dapper.SimpleRepository.SimpleCRUD.Update``1(System.Data.IDbConnection,``0,System.Data.IDbTransaction,System.Nullable{System.Int32})">
            <summary>
            <para>Updates a record or records in the database with only the properties of TEntity</para>
            <para>By default updates records in the table matching the class name</para>
            <para>-Table name can be overridden by adding an attribute on your class [Table("YourTableName")]</para>
            <para>Updates records where the Id property and properties with the [Key] attribute match those in the database.</para>
            <para>Properties marked with attribute [Editable(false)] and complex types are ignored</para>
            <para>Supports transaction and command timeout</para>
            <para>Returns number of rows affected</para>
            </summary>
            <param name="connection"></param>
            <param name="entityToUpdate"></param>
            <param name="transaction"></param>
            <param name="commandTimeout"></param>
            <returns>The number of affected records</returns>
        </member>
        <member name="M:Dapper.SimpleRepository.SimpleCRUD.Delete``1(System.Data.IDbConnection,``0,System.Data.IDbTransaction,System.Nullable{System.Int32})">
            <summary>
            <para>Deletes a record or records in the database that match the object passed in</para>
            <para>-By default deletes records in the table matching the class name</para>
            <para>Table name can be overridden by adding an attribute on your class [Table("YourTableName")]</para>
            <para>Supports transaction and command timeout</para>
            <para>Returns the number of records affected</para>
            </summary>
            <typeparam name="T"></typeparam>
            <param name="connection"></param>
            <param name="entityToDelete"></param>
            <param name="transaction"></param>
            <param name="commandTimeout"></param>
            <returns>The number of records affected</returns>
        </member>
        <member name="M:Dapper.SimpleRepository.SimpleCRUD.Delete``1(System.Data.IDbConnection,System.Object,System.Data.IDbTransaction,System.Nullable{System.Int32})">
            <summary>
            <para>Deletes a record or records in the database by ID</para>
            <para>By default deletes records in the table matching the class name</para>
            <para>-Table name can be overridden by adding an attribute on your class [Table("YourTableName")]</para>
            <para>Deletes records where the Id property and properties with the [Key] attribute match those in the database</para>
            <para>The number of records affected</para>
            <para>Supports transaction and command timeout</para>
            </summary>
            <typeparam name="T"></typeparam>
            <param name="connection"></param>
            <param name="id"></param>
            <param name="transaction"></param>
            <param name="commandTimeout"></param>
            <returns>The number of records affected</returns>
        </member>
        <member name="M:Dapper.SimpleRepository.SimpleCRUD.DeleteList``1(System.Data.IDbConnection,System.Object,System.Data.IDbTransaction,System.Nullable{System.Int32})">
            <summary>
            <para>Deletes a list of records in the database</para>
            <para>By default deletes records in the table matching the class name</para>
            <para>-Table name can be overridden by adding an attribute on your class [Table("YourTableName")]</para>
            <para>Deletes records where that match the where clause</para>
            <para>whereConditions is an anonymous type to filter the results ex: new {Category = 1, SubCategory=2}</para>
            <para>The number of records affected</para>
            <para>Supports transaction and command timeout</para>
            </summary>
            <typeparam name="T"></typeparam>
            <param name="connection"></param>
            <param name="whereConditions"></param>
            <param name="transaction"></param>
            <param name="commandTimeout"></param>
            <returns>The number of records affected</returns>
        </member>
        <member name="M:Dapper.SimpleRepository.SimpleCRUD.DeleteList``1(System.Data.IDbConnection,System.String,System.Object,System.Data.IDbTransaction,System.Nullable{System.Int32})">
            <summary>
            <para>Deletes a list of records in the database</para>
            <para>By default deletes records in the table matching the class name</para>
            <para>-Table name can be overridden by adding an attribute on your class [Table("YourTableName")]</para>
            <para>Deletes records where that match the where clause</para>
            <para>conditions is an SQL where clause ex: "where name='bob'" or "where age>=@Age"</para>
            <para>parameters is an anonymous type to pass in named parameter values: new { Age = 15 }</para>
            <para>Supports transaction and command timeout</para>
            </summary>
            <typeparam name="T"></typeparam>
            <param name="connection"></param>
            <param name="conditions"></param>
            <param name="parameters"></param>
            <param name="transaction"></param>
            <param name="commandTimeout"></param>
            <returns>The number of records affected</returns>
        </member>
        <member name="M:Dapper.SimpleRepository.SimpleCRUD.RecordCount``1(System.Data.IDbConnection,System.String,System.Object,System.Data.IDbTransaction,System.Nullable{System.Int32})">
            <summary>
            <para>By default queries the table matching the class name</para>
            <para>-Table name can be overridden by adding an attribute on your class [Table("YourTableName")]</para>
            <para>Returns a number of records entity by a single id from table T</para>
            <para>Supports transaction and command timeout</para>
            <para>conditions is an SQL where clause ex: "where name='bob'" or "where age>=@Age" - not required </para>
            <para>parameters is an anonymous type to pass in named parameter values: new { Age = 15 }</para>
            </summary>
            <typeparam name="T"></typeparam>
            <param name="connection"></param>
            <param name="conditions"></param>
            <param name="parameters"></param>
            <param name="transaction"></param>
            <param name="commandTimeout"></param>
            <returns>Returns a count of records.</returns>
        </member>
        <member name="M:Dapper.SimpleRepository.SimpleCRUD.RecordCount``1(System.Data.IDbConnection,System.Object,System.Data.IDbTransaction,System.Nullable{System.Int32})">
            <summary>
            <para>By default queries the table matching the class name</para>
            <para>-Table name can be overridden by adding an attribute on your class [Table("YourTableName")]</para>
            <para>Returns a number of records entity by a single id from table T</para>
            <para>Supports transaction and command timeout</para>
            <para>whereConditions is an anonymous type to filter the results ex: new {Category = 1, SubCategory=2}</para>
            </summary>
            <typeparam name="T"></typeparam>
            <param name="connection"></param>
            <param name="whereConditions"></param>
            <param name="transaction"></param>
            <param name="commandTimeout"></param>
            <returns>Returns a count of records.</returns>
        </member>
        <member name="M:Dapper.SimpleRepository.SimpleCRUD.SequentialGuid">
            <summary>
            Generates a GUID based on the current date/time
            http://stackoverflow.com/questions/1752004/sequential-guid-generator-c-sharp
            </summary>
            <returns></returns>
        </member>
        <member name="T:Dapper.SimpleRepository.SimpleCRUD.Dialect">
            <summary>
            Database server dialects
            </summary>
        </member>
        <member name="M:Dapper.SimpleRepository.SimpleCRUD.GetAsync``1(System.Data.IDbConnection,System.Object,System.Data.IDbTransaction,System.Nullable{System.Int32})">
            <summary>
            <para>By default queries the table matching the class name asynchronously </para>
            <para>-Table name can be overridden by adding an attribute on your class [Table("YourTableName")]</para>
            <para>By default filters on the Id column</para>
            <para>-Id column name can be overridden by adding an attribute on your primary key property [Key]</para>
            <para>Supports transaction and command timeout</para>
            <para>Returns a single entity by a single id from table T</para>
            </summary>
            <typeparam name="T"></typeparam>
            <param name="connection"></param>
            <param name="id"></param>
            <param name="transaction"></param>
            <param name="commandTimeout"></param>
            <returns>Returns a single entity by a single id from table T.</returns>
        </member>
        <member name="M:Dapper.SimpleRepository.SimpleCRUD.GetListAsync``1(System.Data.IDbConnection,System.Object,System.Data.IDbTransaction,System.Nullable{System.Int32})">
            <summary>
            <para>By default queries the table matching the class name asynchronously</para>
            <para>-Table name can be overridden by adding an attribute on your class [Table("YourTableName")]</para>
            <para>whereConditions is an anonymous type to filter the results ex: new {Category = 1, SubCategory=2}</para>
            <para>Supports transaction and command timeout</para>
            <para>Returns a list of entities that match where conditions</para>
            </summary>
            <typeparam name="T"></typeparam>
            <param name="connection"></param>
            <param name="whereConditions"></param>
            <param name="transaction"></param>
            <param name="commandTimeout"></param>
            <returns>Gets a list of entities with optional exact match where conditions</returns>
        </member>
        <member name="M:Dapper.SimpleRepository.SimpleCRUD.GetListAsync``1(System.Data.IDbConnection,System.String,System.Object,System.Data.IDbTransaction,System.Nullable{System.Int32})">
            <summary>
            <para>By default queries the table matching the class name</para>
            <para>-Table name can be overridden by adding an attribute on your class [Table("YourTableName")]</para>
            <para>conditions is an SQL where clause and/or order by clause ex: "where name='bob'" or "where age>=@Age"</para>
            <para>parameters is an anonymous type to pass in named parameter values: new { Age = 15 }</para>
            <para>Supports transaction and command timeout</para>
            <para>Returns a list of entities that match where conditions</para>
            </summary>
            <typeparam name="T"></typeparam>
            <param name="connection"></param>
            <param name="conditions"></param>
            <param name="parameters"></param>
            <param name="transaction"></param>
            <param name="commandTimeout"></param>
            <returns>Gets a list of entities with optional SQL where conditions</returns>
        </member>
        <member name="M:Dapper.SimpleRepository.SimpleCRUD.GetListAsync``1(System.Data.IDbConnection)">
            <summary>
            <para>By default queries the table matching the class name asynchronously</para>
            <para>-Table name can be overridden by adding an attribute on your class [Table("YourTableName")]</para>
            <para>Returns a list of all entities</para>
            </summary>
            <typeparam name="T"></typeparam>
            <param name="connection"></param>
            <returns>Gets a list of all entities</returns>
        </member>
        <member name="M:Dapper.SimpleRepository.SimpleCRUD.GetListPagedAsync``1(System.Data.IDbConnection,System.Int32,System.Int32,System.String,System.String,System.Object,System.Data.IDbTransaction,System.Nullable{System.Int32})">
            <summary>
            <para>By default queries the table matching the class name</para>
            <para>-Table name can be overridden by adding an attribute on your class [Table("YourTableName")]</para>
            <para>conditions is an SQL where clause ex: "where name='bob'" or "where age>=@Age" - not required </para>
            <para>orderby is a column or list of columns to order by ex: "lastname, age desc" - not required - default is by primary key</para>
            <para>parameters is an anonymous type to pass in named parameter values: new { Age = 15 }</para>
            <para>Returns a list of entities that match where conditions</para>
            </summary>
            <typeparam name="T"></typeparam>
            <param name="connection"></param>
            <param name="pageNumber"></param>
            <param name="rowsPerPage"></param>
            <param name="conditions"></param>
            <param name="orderby"></param>
            <param name="parameters"></param>
            <param name="transaction"></param>
            <param name="commandTimeout"></param>
            <returns>Gets a list of entities with optional exact match where conditions</returns>
        </member>
        <member name="M:Dapper.SimpleRepository.SimpleCRUD.InsertAsync``1(System.Data.IDbConnection,``0,System.Data.IDbTransaction,System.Nullable{System.Int32})">
            <summary>
            <para>Inserts a row into the database asynchronously</para>
            <para>By default inserts into the table matching the class name</para>
            <para>-Table name can be overridden by adding an attribute on your class [Table("YourTableName")]</para>
            <para>Insert filters out Id column and any columns with the [Key] attribute</para>
            <para>Properties marked with attribute [Editable(false)] and complex types are ignored</para>
            <para>Supports transaction and command timeout</para>
            <para>Returns the ID (primary key) of the newly inserted record if it is identity using the int? type, otherwise null</para>
            </summary>
            <param name="connection"></param>
            <param name="entityToInsert"></param>
            <param name="transaction"></param>
            <param name="commandTimeout"></param>
            <returns>The ID (primary key) of the newly inserted record if it is identity using the int? type, otherwise null</returns>
        </member>
        <member name="M:Dapper.SimpleRepository.SimpleCRUD.InsertAsync``2(System.Data.IDbConnection,``1,System.Data.IDbTransaction,System.Nullable{System.Int32})">
            <summary>
            <para>Inserts a row into the database, using ONLY the properties defined by TEntity</para>
            <para>By default inserts into the table matching the class name</para>
            <para>-Table name can be overridden by adding an attribute on your class [Table("YourTableName")]</para>
            <para>Insert filters out Id column and any columns with the [Key] attribute</para>
            <para>Properties marked with attribute [Editable(false)] and complex types are ignored</para>
            <para>Supports transaction and command timeout</para>
            <para>Returns the ID (primary key) of the newly inserted record if it is identity using the defined type, otherwise null</para>
            </summary>
            <param name="connection"></param>
            <param name="entityToInsert"></param>
            <param name="transaction"></param>
            <param name="commandTimeout"></param>
            <returns>The ID (primary key) of the newly inserted record if it is identity using the defined type, otherwise null</returns>
        </member>
        <member name="M:Dapper.SimpleRepository.SimpleCRUD.UpdateAsync``1(System.Data.IDbConnection,``0,System.Data.IDbTransaction,System.Nullable{System.Int32},System.Nullable{System.Threading.CancellationToken})">
            <summary>
             <para>Updates a record or records in the database asynchronously</para>
             <para>By default updates records in the table matching the class name</para>
             <para>-Table name can be overridden by adding an attribute on your class [Table("YourTableName")]</para>
             <para>Updates records where the Id property and properties with the [Key] attribute match those in the database.</para>
             <para>Properties marked with attribute [Editable(false)] and complex types are ignored</para>
             <para>Supports transaction and command timeout</para>
             <para>Returns number of rows affected</para>
             </summary>
             <param name="connection"></param>
             <param name="entityToUpdate"></param>
            <param name="transaction"></param>
            <param name="commandTimeout"></param>
            <returns>The number of affected records</returns>
        </member>
        <member name="M:Dapper.SimpleRepository.SimpleCRUD.DeleteAsync``1(System.Data.IDbConnection,``0,System.Data.IDbTransaction,System.Nullable{System.Int32})">
            <summary>
            <para>Deletes a record or records in the database that match the object passed in asynchronously</para>
            <para>-By default deletes records in the table matching the class name</para>
            <para>Table name can be overridden by adding an attribute on your class [Table("YourTableName")]</para>
            <para>Supports transaction and command timeout</para>
            <para>Returns the number of records affected</para>
            </summary>
            <typeparam name="T"></typeparam>
            <param name="connection"></param>
            <param name="entityToDelete"></param>
            <param name="transaction"></param>
            <param name="commandTimeout"></param>
            <returns>The number of records affected</returns>
        </member>
        <member name="M:Dapper.SimpleRepository.SimpleCRUD.DeleteAsync``1(System.Data.IDbConnection,System.Object,System.Data.IDbTransaction,System.Nullable{System.Int32})">
            <summary>
            <para>Deletes a record or records in the database by ID asynchronously</para>
            <para>By default deletes records in the table matching the class name</para>
            <para>-Table name can be overridden by adding an attribute on your class [Table("YourTableName")]</para>
            <para>Deletes records where the Id property and properties with the [Key] attribute match those in the database</para>
            <para>The number of records affected</para>
            <para>Supports transaction and command timeout</para>
            </summary>
            <typeparam name="T"></typeparam>
            <param name="connection"></param>
            <param name="id"></param>
            <param name="transaction"></param>
            <param name="commandTimeout"></param>
            <returns>The number of records affected</returns>
        </member>
        <member name="M:Dapper.SimpleRepository.SimpleCRUD.DeleteListAsync``1(System.Data.IDbConnection,System.Object,System.Data.IDbTransaction,System.Nullable{System.Int32})">
            <summary>
            <para>Deletes a list of records in the database</para>
            <para>By default deletes records in the table matching the class name</para>
            <para>-Table name can be overridden by adding an attribute on your class [Table("YourTableName")]</para>
            <para>Deletes records where that match the where clause</para>
            <para>whereConditions is an anonymous type to filter the results ex: new {Category = 1, SubCategory=2}</para>
            <para>The number of records affected</para>
            <para>Supports transaction and command timeout</para>
            </summary>
            <typeparam name="T"></typeparam>
            <param name="connection"></param>
            <param name="whereConditions"></param>
            <param name="transaction"></param>
            <param name="commandTimeout"></param>
            <returns>The number of records affected</returns>
        </member>
        <member name="M:Dapper.SimpleRepository.SimpleCRUD.DeleteListAsync``1(System.Data.IDbConnection,System.String,System.Object,System.Data.IDbTransaction,System.Nullable{System.Int32})">
            <summary>
            <para>Deletes a list of records in the database</para>
            <para>By default deletes records in the table matching the class name</para>
            <para>-Table name can be overridden by adding an attribute on your class [Table("YourTableName")]</para>
            <para>Deletes records where that match the where clause</para>
            <para>conditions is an SQL where clause ex: "where name='bob'" or "where age>=@Age"</para>
            <para>parameters is an anonymous type to pass in named parameter values: new { Age = 15 }</para>
            </summary>
            <typeparam name="T"></typeparam>
            <param name="connection"></param>
            <param name="conditions"></param>
            <param name="parameters"></param>
            <param name="transaction"></param>
            <param name="commandTimeout"></param>
            <returns>The number of records affected</returns>
        </member>
        <member name="M:Dapper.SimpleRepository.SimpleCRUD.RecordCountAsync``1(System.Data.IDbConnection,System.String,System.Object,System.Data.IDbTransaction,System.Nullable{System.Int32})">
            <summary>
            <para>By default queries the table matching the class name</para>
            <para>-Table name can be overridden by adding an attribute on your class [Table("YourTableName")]</para>
            <para>conditions is an SQL where clause ex: "where name='bob'" or "where age>=@Age" - not required </para>
            <para>parameters is an anonymous type to pass in named parameter values: new { Age = 15 }</para>   
            <para>Supports transaction and command timeout</para>
            /// </summary>
            <typeparam name="T"></typeparam>
            <param name="connection"></param>
            <param name="conditions"></param>
            <param name="parameters"></param>
            <param name="transaction"></param>
            <param name="commandTimeout"></param>
            <returns>Returns a count of records.</returns>
        </member>
        <member name="M:Dapper.SimpleRepository.SimpleCRUD.RecordCountAsync``1(System.Data.IDbConnection,System.Object,System.Data.IDbTransaction,System.Nullable{System.Int32})">
            <summary>
            <para>By default queries the table matching the class name</para>
            <para>-Table name can be overridden by adding an attribute on your class [Table("YourTableName")]</para>
            <para>Returns a number of records entity by a single id from table T</para>
            <para>Supports transaction and command timeout</para>
            <para>whereConditions is an anonymous type to filter the results ex: new {Category = 1, SubCategory=2}</para>
            </summary>
            <typeparam name="T"></typeparam>
            <param name="connection"></param>
            <param name="whereConditions"></param>
            <param name="transaction"></param>
            <param name="commandTimeout"></param>
            <returns>Returns a count of records.</returns>
        </member>
        <member name="T:Dapper.SimpleRepository.TableAttribute">
            <summary>
            Optional Table attribute.
            You can use the System.ComponentModel.DataAnnotations version in its place to specify the table name of a poco
            </summary>
        </member>
        <member name="M:Dapper.SimpleRepository.TableAttribute.#ctor(System.String)">
            <summary>
            Optional Table attribute.
            </summary>
            <param name="tableName"></param>
        </member>
        <member name="P:Dapper.SimpleRepository.TableAttribute.Name">
            <summary>
            Name of the table
            </summary>
        </member>
        <member name="P:Dapper.SimpleRepository.TableAttribute.Schema">
            <summary>
            Name of the schema
            </summary>
        </member>
        <member name="T:Dapper.SimpleRepository.ColumnAttribute">
            <summary>
            Optional Column attribute.
            You can use the System.ComponentModel.DataAnnotations version in its place to specify the table name of a poco
            </summary>
        </member>
        <member name="M:Dapper.SimpleRepository.ColumnAttribute.#ctor(System.String)">
            <summary>
            Optional Column attribute.
            </summary>
            <param name="columnName"></param>
        </member>
        <member name="P:Dapper.SimpleRepository.ColumnAttribute.Name">
            <summary>
            Name of the column
            </summary>
        </member>
        <member name="T:Dapper.SimpleRepository.KeyAttribute">
            <summary>
            Optional Key attribute.
            You can use the System.ComponentModel.DataAnnotations version in its place to specify the Primary Key of a poco
            </summary>
        </member>
        <member name="T:Dapper.SimpleRepository.NotMappedAttribute">
            <summary>
            Optional NotMapped attribute.
            You can use the System.ComponentModel.DataAnnotations version in its place to specify that the property is not mapped
            </summary>
        </member>
        <member name="T:Dapper.SimpleRepository.RequiredAttribute">
            <summary>
            Optional Key attribute.
            You can use the System.ComponentModel.DataAnnotations version in its place to specify a required property of a poco
            </summary>
        </member>
        <member name="T:Dapper.SimpleRepository.EditableAttribute">
            <summary>
            Optional Editable attribute.
            You can use the System.ComponentModel.DataAnnotations version in its place to specify the properties that are editable
            </summary>
        </member>
        <member name="M:Dapper.SimpleRepository.EditableAttribute.#ctor(System.Boolean)">
            <summary>
            Optional Editable attribute.
            </summary>
            <param name="iseditable"></param>
        </member>
        <member name="P:Dapper.SimpleRepository.EditableAttribute.AllowEdit">
            <summary>
            Does this property persist to the database?
            </summary>
        </member>
        <member name="T:Dapper.SimpleRepository.ReadOnlyAttribute">
            <summary>
            Optional Readonly attribute.
            You can use the System.ComponentModel version in its place to specify the properties that are editable
            </summary>
        </member>
        <member name="M:Dapper.SimpleRepository.ReadOnlyAttribute.#ctor(System.Boolean)">
            <summary>
            Optional ReadOnly attribute.
            </summary>
            <param name="isReadOnly"></param>
        </member>
        <member name="P:Dapper.SimpleRepository.ReadOnlyAttribute.IsReadOnly">
            <summary>
            Does this property persist to the database?
            </summary>
        </member>
        <member name="T:Dapper.SimpleRepository.IgnoreSelectAttribute">
            <summary>
            Optional IgnoreSelect attribute.
            Custom for Dapper.SimpleCRUD to exclude a property from Select methods
            </summary>
        </member>
        <member name="T:Dapper.SimpleRepository.IgnoreInsertAttribute">
            <summary>
            Optional IgnoreInsert attribute.
            Custom for Dapper.SimpleCRUD to exclude a property from Insert methods
            </summary>
        </member>
        <member name="T:Dapper.SimpleRepository.IgnoreUpdateAttribute">
            <summary>
            Optional IgnoreUpdate attribute.
            Custom for Dapper.SimpleCRUD to exclude a property from Update methods
            </summary>
        </member>
    </members>
</doc>
